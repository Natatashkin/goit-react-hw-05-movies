{"version":3,"file":"static/js/342.1f2488f1.chunk.js","mappings":"uRAEMA,EAAmBC,EAAAA,QAAAA,IAAH,8IAIL,mBAA4BC,EAA5B,EAAGC,MAASD,SAAwB,MACjC,mBAA4BA,EAA5B,EAAGC,MAASD,SAAwB,MAGlDE,EAAOH,EAAAA,QAAAA,KAAH,sEAKJI,EAAQJ,EAAAA,QAAAA,MAAH,+JACM,mBAA4BC,EAA5B,EAAGC,MAASD,SAAwB,MACjC,mBAA4BA,EAA5B,EAAGC,MAASD,SAAwB,MACtC,mBAA4BA,EAA5B,EAAGC,MAASD,SAAwB,MACnC,mBAA4BA,EAA5B,EAAGC,MAASD,SAAwB,MACpC,qBAAGC,MAASG,QAAwBC,gBACvC,qBAAGJ,MAASG,QAAwBE,gB,uMCbvCC,EAAa,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,SACrC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KA8BA,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAGAM,GAAW,GACX,IAAK,IACYE,EADb,mCACF,oGACqBC,EAAAA,GAAwBT,GAD7C,UAE6B,KADrBU,EADR,QAEWC,cAFX,uBAGIC,EAAAA,GAAAA,MAAA,6BAAkCZ,EAAlC,MACAM,GAAW,GAJf,0BAOEF,GAAU,SAAAS,GAAU,wBAAQA,IAAR,OAAuBH,EAAKI,aAChDR,GAAW,GARb,2CADE,qDAWFE,IACA,MAAOO,GACPC,QAAQC,IAAIF,GACZT,GAAW,OAEZ,CAACN,KAEF,UAAC,EAAAjB,iBAAD,YACE,UAAC,EAAAI,KAAD,CAAM+B,SA9BV,SAAsBC,GACpBA,EAAEC,iBACFrB,EAAgB,CAAEsB,MAAO5B,EAAS6B,QAAQC,QAC1C9B,EAAS6B,QAAQC,MAAQ,IA2BvB,WACE,SAAC,EAAAnC,MAAD,CAAOoC,IAAK/B,EAAUgC,KAAK,OAAOC,YAAY,0BAC9C,SAAC,KAAD,CAAQD,KAAK,SAASE,KAAK,cAE5BtB,IAAW,SAAC,KAAD,IACXF,IACC,SAAC,KAAD,UACGA,EAAOyB,KAAI,SAAAC,GAAI,OACd,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKE,IAAMC,MAAO,CAAEC,KAAMtC,GAAvC,UACE,SAAC,KAAD,CAAWuC,QAASL,OAFbA,EAAKE,UAQtB,SAAC,KAAD,S,yPC5DNI,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAa,mCAGNC,EAAiB,mCAAG,WAAMZ,GAAN,uFACRU,IAAAA,IAAA,0BACFV,EADE,oBACcW,EADd,wCADQ,cACzBE,EADyB,yBAKxBA,EAAS5B,MALe,2CAAH,sDAQjB6B,EAAc,mCAAG,WAAMlB,GAAN,uFACLc,IAAAA,IAAA,+BACGC,EADH,kBACuBf,EADvB,wCADK,cACtBiB,EADsB,yBAIrBA,EAAS5B,MAJY,2CAAH,sDAOd8B,EAAe,mCAAG,WAAMT,GAAN,uFACNI,IAAAA,IAAA,gBACZJ,EADY,oBACEK,EADF,uDADM,cACvBE,EADuB,yBAItBA,GAJsB,2CAAH","sources":["pages/MoviesPage/MoviePage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst MoviesPageStyles = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-top: ${({ theme: { spacing } }) => spacing(4)};\n  padding-bottom: ${({ theme: { spacing } }) => spacing(4)};\n`;\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Input = styled.input`\n  padding-top: ${({ theme: { spacing } }) => spacing(1)};\n  padding-bottom: ${({ theme: { spacing } }) => spacing(1)};\n  padding-left: ${({ theme: { spacing } }) => spacing(2)};\n  padding-right: ${({ theme: { spacing } }) => spacing(2)};\n  border-radius: ${({ theme: { options } }) => options.borderRadius};\n  box-shadow: ${({ theme: { options } }) => options.shadowInset}; ;\n`;\n\nexport { MoviesPageStyles, Form, Input };\n","import React from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useRef, useState, useEffect } from 'react';\nimport { MoviesGallery, MovieCard, Card, Button, Loader } from 'components';\nimport { MoviesPageStyles, Form, Input } from './MoviePage.styled';\nimport * as movieApi from '../../services/movieApi';\nimport toast, { Toaster } from 'react-hot-toast';\n\nexport const MoviesPage = () => {\n  const inputRef = useRef(null);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const searchQuery = searchParams.get('query');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setSearchParams({ query: inputRef.current.value });\n    inputRef.current.value = '';\n  }\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    setLoading(true);\n    try {\n      async function getMoviesByQuery() {\n        const data = await movieApi.getSearchMovie(searchQuery);\n        if (data.total_results === 0) {\n          toast.error(`No movies on query ${searchQuery}!`);\n          setLoading(false);\n          return;\n        }\n        setMovies(prevMovies => [...prevMovies, ...data.results]);\n        setLoading(false);\n      }\n      getMoviesByQuery();\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }, [searchQuery]);\n  return (\n    <MoviesPageStyles>\n      <Form onSubmit={handleSubmit}>\n        <Input ref={inputRef} type=\"text\" placeholder=\"Enter title of movie\" />\n        <Button type=\"submit\" text=\"Search\" />\n      </Form>\n      {loading && <Loader />}\n      {movies && (\n        <MoviesGallery>\n          {movies.map(item => (\n            <Card key={item.id}>\n              <Link to={`${item.id}`} state={{ from: location }}>\n                <MovieCard details={item} />\n              </Link>\n            </Card>\n          ))}\n        </MoviesGallery>\n      )}\n      <Toaster />\n    </MoviesPageStyles>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst AUTH_TOKEN = 'c18b6e4daa60e3e4af297dba0629174d';\n\n//type 'day' or 'week'\nexport const getMoviesTrending = async type => {\n  const response = await axios.get(\n    `/trending/movie/${type}?api_key=${AUTH_TOKEN}&language=en-US&include_adult=false`\n  );\n\n  return response.data;\n};\n\nexport const getSearchMovie = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${AUTH_TOKEN}&query=${query}&language=en-US&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${AUTH_TOKEN}&language=en-US&append_to_response=credits,reviews`\n  );\n  return response;\n};\n"],"names":["MoviesPageStyles","styled","spacing","theme","Form","Input","options","borderRadius","shadowInset","MoviesPage","inputRef","useRef","location","useLocation","useSearchParams","searchParams","setSearchParams","searchQuery","get","useState","movies","setMovies","loading","setLoading","useEffect","getMoviesByQuery","movieApi","data","total_results","toast","prevMovies","results","error","console","log","onSubmit","e","preventDefault","query","current","value","ref","type","placeholder","text","map","item","to","id","state","from","details","axios","AUTH_TOKEN","getMoviesTrending","response","getSearchMovie","getMovieDetails"],"sourceRoot":""}